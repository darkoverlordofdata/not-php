// Generated by CoffeeScript 1.3.3
var CASE_LOWER, CASE_UPPER, PATHINFO_BASENAME, PATHINFO_DIRNAME, PATHINFO_EXTENSION, PATHINFO_FILENAME, array_keys, array_merge, array_merge_recursive, class_exists, count, crypto, file_exists, format, fs, function_exists, get_class, ip2long, ltrim, method_exists, path, querystring, register_class, rtrim, stripslashes, url, util, __pop, __push,
  __slice = [].slice;

format = require('format-number');

fs = require('fs');

path = require('path');

querystring = require('querystring');

url = require('url');

util = require('util');

crypto = require('crypto');

exports.define = function(name, value, scope) {
  if (scope == null) {
    scope = global;
  }
  if (scope[name] != null) {
    return false;
  }
  Object.defineProperty(scope, name, {
    'value': value,
    'enumerable': true,
    'writable': false
  });
  return true;
};

exports.defined = function(name, scope) {
  if (scope == null) {
    scope = global;
  }
  return scope[name] != null;
};

exports.constant = function(name, scope) {
  if (scope == null) {
    scope = global;
  }
  if (scope[name] != null) {
    return scope[name];
  } else {
    return null;
  }
};

exports.die = function($message) {
  console.log($message);
  return process.exit(1);
};

exports.array_diff = function($array1, $array2) {
  var $ret, $val, _i, _len;
  $ret = [];
  for (_i = 0, _len = $array1.length; _i < _len; _i++) {
    $val = $array1[_i];
    if ($array2.indexOf($val) === -1) {
      $ret.push($val);
    }
  }
  return $ret;
};

exports.array_filter = function($input, $callback) {
  var $item, _i, _len;
  if ($callback == null) {
    $callback = null;
  }
  if ($callback === null) {
    for (_i = 0, _len = $input.length; _i < _len; _i++) {
      $item = $input[_i];
      if (Boolean($item) === true) {
        return $item;
      }
    }
  }
};

exports.array_keys = array_keys = function($input, $search) {
  var $i, $k, $keys, $ret;
  if ($search == null) {
    $search = null;
  }
  $ret = [];
  $keys = Object.keys($input);
  if ($search === null) {
    return $keys;
  } else {
    $i = 0;
    while ($i < $keys.length) {
      $k = $keys[$i];
      if ($input[$k] === $search) {
        $ret.push($k);
      }
      $i++;
    }
    return $ret;
  }
};

exports.array_unique = function($array) {
  var $k, $ret, $v, $val, _i, _len;
  $ret = {};
  $val = {};
  if (Array.isArray($array)) {
    for ($k = _i = 0, _len = $array.length; _i < _len; $k = ++_i) {
      $v = $array[$k];
      if (!($val[$v] != null)) {
        $val[$v] = $k;
        $ret[$k] = $v;
      }
    }
  } else {
    for ($k in $array) {
      $v = $array[$k];
      if (!($val[$v] != null)) {
        $val[$v] = $k;
        $ret[$k] = $v;
      }
    }
  }
  return $ret;
};

exports.array_values = function($input) {
  var $k, $ret, $v;
  $ret = [];
  for ($k in $input) {
    $v = $input[$k];
    $ret.push($v);
  }
  return $ret;
};

exports.array_merge = array_merge = function($array1, $array2) {
  var $item, $key, $ret;
  $ret = {};
  for ($key in $array1) {
    $item = $array1[$key];
    $ret[$key] = $item;
  }
  for ($key in $array2) {
    $item = $array2[$key];
    $ret[$key] = $item;
  }
  return $ret;
};

exports.array_merge_recursive = array_merge_recursive = function($array1, $array2) {
  var $item, $key, $ret;
  $ret = {};
  for ($key in $array1) {
    $item = $array1[$key];
    $ret[$key] = $item;
  }
  for ($key in $array2) {
    $item = $array2[$key];
    if (typeof $array1[$key] === 'object' || typeof $item === 'object') {
      $ret[$key] = array_merge($array1[$key], $item);
    } else {
      $ret[$key] = $item;
    }
  }
  return $ret;
};

exports.array_pad = function($input, $pad_size, $pad_value) {
  var $i, $start, _i, _ref;
  if ($input.length < $pad_size) {
    $start = $input.length;
    for ($i = _i = $start, _ref = $pad_size - 1; $start <= _ref ? _i <= _ref : _i >= _ref; $i = $start <= _ref ? ++_i : --_i) {
      $input[$i] = $pad_value;
    }
  }
  return $input;
};

__push = [].push;

exports.array_push = function() {
  var $array, $var;
  $array = arguments[0], $var = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  return __push.apply($array, $var);
};

__pop = [].pop;

exports.array_pop = function($array) {
  return __pop.apply($array);
};

exports.array_shift = function($array) {
  return $array.shift();
};

exports.array_slice = function($array, $offset, $length) {
  var $end;
  if ($length == null) {
    $length = null;
  }
  if ($length === null) {
    $end = $array.length;
  } else {
    $end = $offset + $length;
  }
  return $array.slice($offset, $end);
};

exports.array_splice = function($input, $offset, $length, $replacement) {
  if ($length == null) {
    $length = 0;
  }
  if ($replacement == null) {
    $replacement = null;
  }
  if ($length === 0) {
    $length = $input.length;
  }
  if ($replacement === null) {
    return $input.splice($offset, $length);
  } else {
    return Array.prototype.splice.apply($input, [$offset, $length].concat($replacement));
  }
};

exports.array_unshift = function() {
  var $array, $var;
  $array = arguments[0], $var = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  return Array.prototype.unshift.apply($array, $var);
};

exports.call_user_func = function() {
  var $callback, $method, $object, $parameter;
  $callback = arguments[0], $parameter = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  if (Array.isArray($callback)) {
    $object = $callback[0];
    $method = $callback[1];
  } else {
    $object = global;
    $method = $callback;
  }
  return $object[$method].apply($object, $parameter);
};

exports.call_user_func_array = function($callback, $param_arr) {
  var $method, $object;
  if (Array.isArray($callback)) {
    $object = $callback[0];
    $method = $callback[1];
  } else {
    $object = global;
    $method = $callback;
  }
  return $object[$method].apply($object, $param_arr);
};

exports.count = count = function($var) {
  if ($var === null) {
    return 0;
  }
  if (typeof $var === 'string' || typeof $var === 'number' || typeof $var === 'boolean') {
    return 1;
  }
  if (typeof $var !== 'object') {
    return 0;
  }
  return Object.keys($var).length;
};

exports.current = function($array) {
  var $length;
  if (Array.isArray($array)) {
    if ($array.length > 0) {
      return $array[0];
    } else {
      return false;
    }
  } else {
    $length = Object.keys($array).length;
    if ($length > 0) {
      return $array[Object.keys($array)[0]];
    } else {
      return false;
    }
  }
};

exports.dirname = function($str) {
  return path.dirname($str);
};

exports.empty = function($var) {
  return !(function() {
    switch (typeof $var) {
      case 'undefined':
        return false;
      case 'string':
        if ($var.length === 0) {
          return false;
        } else {
          return true;
        }
        break;
      case 'number':
        if ($var === 0) {
          return false;
        } else {
          return true;
        }
        break;
      case 'boolean':
        return $var;
      case 'object':
        if (Array.isArray($var)) {
          if ($var.length === 0) {
            return false;
          } else {
            return true;
          }
        } else {
          if (count($var) === 0) {
            return false;
          } else {
            return true;
          }
        }
        break;
      default:
        return false;
    }
  })();
};

exports.end = function($array) {
  var $length;
  if (Array.isArray($array)) {
    $length = $array.length;
    if ($length > 0) {
      return $array[$length - 1];
    } else {
      return false;
    }
  } else {
    $length = Object.keys($array).length;
    if ($length > 0) {
      return $array[Object.keys($array)[$length - 1]];
    } else {
      return false;
    }
  }
};

exports.exit = exports.die = function($status) {
  if ($status == null) {
    $status = 0;
  }
  if (typeof $status === 'number') {
    return process.exit($status);
  } else {
    console.log($status);
    return process.exit(1);
  }
};

exports.explode = function($delimiter, $string, $limit) {
  return $string.split($delimiter, $limit);
};

exports.number_format = function($number, $decimals, $dec_point, $thousands_sep) {
  var $format;
  if ($decimals == null) {
    $decimals = 0;
  }
  if ($dec_point == null) {
    $dec_point = '.';
  }
  if ($thousands_sep == null) {
    $thousands_sep = ',';
  }
  $format = format({
    seperator: $thousands_sep,
    decimal: $dec_point,
    padRight: $decimals,
    truncate: $decimals
  });
  return $format($number);
};

exports.file_exists = file_exists = fs.existsSync || path.existsSync;

exports.implode = function($glue, $pieces) {
  var $key, $ret, $val;
  if ($pieces == null) {
    $pieces = null;
  }
  if ($pieces === null) {
    $pieces = $glue;
    $glue = '';
  }
  if (Array.isArray($pieces)) {
    return $pieces.join($glue);
  } else {
    $ret = [];
    for ($key in $pieces) {
      $val = $pieces[$key];
      $ret.push($val);
    }
    return $ret.join($glue);
  }
};

exports.in_array = function($needle, $haystack, $strict) {
  var $pos;
  if ($strict == null) {
    $strict = false;
  }
  $pos = $haystack.indexOf($needle);
  if ($pos === -1) {
    return false;
  }
  if ($strict) {
    if (typeof $needle === typeof $haystack[$pos]) {
      return true;
    } else {
      return false;
    }
  } else {
    return true;
  }
};

exports.is_array = function($var) {
  if (typeof $var === 'object') {
    if ($var === null) {
      return false;
    } else {
      return true;
    }
  } else {
    return false;
  }
};

exports.is_bool = function($var) {
  if (typeof $var === 'boolean') {
    return true;
  } else {
    return false;
  }
};

exports.is_callable = function($class, $method) {
  var $def;
  $def = global[$class];
  if (typeof $def === 'function') {
    if (typeof $def.__proto__[$method] === method) {
      true;
    }
  }
  return false;
};

exports.is_file = function($path) {
  var $b, $stats;
  try {
    $stats = fs.statSync($path);
    return $b = $stats.isFile();
  } catch (ex) {
    return $b = false;
  } finally {
    return $b;
  }
};

exports.is_dir = function($path) {
  var $b, $stats;
  try {
    $stats = fs.statSync($path);
    return $b = $stats.isDirectory();
  } catch (ex) {
    return $b = false;
  } finally {
    return $b;
  }
};

exports.is_null = function($var) {
  if ($var === null || typeof $var === 'undefined') {
    return true;
  } else {
    return false;
  }
};

exports.is_numeric = function($var) {
  if (typeof $var === 'number') {
    return true;
  } else {
    return false;
  }
};

exports.is_object = function($var) {
  if (typeof $var === 'object') {
    return true;
  } else {
    return false;
  }
};

exports.is_string = function($var) {
  if (typeof $var === 'string') {
    return true;
  } else {
    return false;
  }
};

exports.ltrim = ltrim = function($str, $chars) {
  $chars = $chars != null ? $chars : "\\s";
  return $str.replace(new RegExp("^[" + $chars + "]+", "g"), "");
};

exports.microtime = function($get_as_float) {
  var $now, $sec;
  if ($get_as_float == null) {
    $get_as_float = false;
  }
  $now = new Date().getTime() / 1000;
  $sec = parseInt($now, 10);
  return '' + ($get_as_float ? $now : (Math.round(($now - $sec) * 1000) / 1000) + ' ' + $sec);
};

exports.mt_rand = function($min, $max) {
  if ($min == null) {
    $min = 0;
  }
  if ($max == null) {
    $max = 2147483647;
  }
  return Math.floor(Math.random() * $max) - $min;
};

exports.rand = function($min, $max) {
  if ($min == null) {
    $min = 0;
  }
  if ($max == null) {
    $max = 2147483647;
  }
  return Math.floor(Math.random() * $max) - $min;
};

exports.parse_str = function($str, $arr) {
  var $key, $p, $val;
  if ($arr == null) {
    $arr = {};
  }
  $p = querystring.parse($str);
  for ($key in $p) {
    $val = $p[$key];
    $arr[$key] = $val;
  }
};

exports.parse_url = function($url) {
  var $p, $password, $username, _ref, _ref1;
  $p = url.parse($url);
  if ($p.auth != null) {
    _ref = $p.auth.split(':'), $username = _ref[0], $password = _ref[1];
  } else {
    _ref1 = ['', ''], $username = _ref1[0], $password = _ref1[1];
  }
  return {
    scheme: $p.protocol.split(':')[0],
    host: $p.hostname,
    port: $p.port,
    user: $username,
    pass: $password,
    path: $p.pathname,
    query: $p.query,
    fragment: $p.hash
  };
};

exports.createRegExp = function($pattern) {
  var $delim, $end, $flags;
  $delim = $pattern.charAt(0);
  $end = $pattern.lastIndexOf($delim);
  $flags = $pattern.substr($end + 1);
  $pattern = $pattern.substr(1, $end - 1);
  return new RegExp($pattern, $flags);
};

exports.PATHINFO_DIRNAME = PATHINFO_DIRNAME = 1;

exports.PATHINFO_BASENAME = PATHINFO_BASENAME = 2;

exports.PATHINFO_EXTENSION = PATHINFO_EXTENSION = 4;

exports.PATHINFO_FILENAME = PATHINFO_FILENAME = 8;

exports.pathinfo = function($path, $options) {
  var $result;
  if ($options == null) {
    $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME;
  }
  $result = {};
  if (($options & PATHINFO_DIRNAME) === PATHINFO_DIRNAME) {
    $result['dirname'] = path.dirname($path);
    if ($options === PATHINFO_DIRNAME) {
      return $result['dirname'];
    }
  }
  if (($options & PATHINFO_BASENAME) === PATHINFO_BASENAME) {
    $result['basename'] = path.basename($path);
    if ($options === PATHINFO_BASENAME) {
      return $result['basename'];
    }
  }
  if (($options & PATHINFO_EXTENSION) === PATHINFO_EXTENSION) {
    $result['extension'] = path.extname($path);
    if ($options === PATHINFO_EXTENSION) {
      return $result['extension'];
    }
  }
  if (($options & PATHINFO_FILENAME) === PATHINFO_FILENAME) {
    $result['filename'] = path.basename($path, path.extname($path));
    if ($options === PATHINFO_FILENAME) {
      return $result['filename'];
    }
  }
  return $result;
};

exports.preg_quote = function($str, $delimiter) {
  var $array, $char, $i;
  if ($delimiter == null) {
    $delimiter = '';
  }
  $array = $str.split('');
  for ($i in $array) {
    $char = $array[$i];
    if (".\+*?[^]$(){}=!<>|:-".indexOf($char) !== -1) {
      $array[$i] = "\\" + $char;
    }
  }
  return $array.join();
};

exports.PREG_SPLIT_NO_EMPTY = 1;

exports.PREG_SPLIT_DELIM_CAPTURE = 2;

exports.PREG_SPLIT_OFFSET_CAPTURE = 4;

exports.preg_split = function($pattern, $subject, $limit, $flags) {
  var $item, $result, _i, _len, _results;
  if ($limit == null) {
    $limit = -1;
  }
  if ($flags == null) {
    $flags = 0;
  }
  if ($flags & PREG_SPLIT_OFFSET_CAPTURE) {
    throw new Error('Unsupported feature: PREG_SPLIT_OFFSET_CAPTURE');
  }
  $result = $subject.split(createRegExp($pattern), $limit);
  if ($flags & PREG_SPLIT_NO_EMPTY) {
    _results = [];
    for (_i = 0, _len = $result.length; _i < _len; _i++) {
      $item = $result[_i];
      if ($item != null) {
        _results.push($item);
      }
    }
    return _results;
  } else {
    return $result;
  }
};

exports.preg_match = function($pattern, $subject) {
  var $regex;
  $regex = createRegExp($pattern);
  return $subject.match($regex);
};

exports.PREG_PATTERN_ORDER = 1;

exports.PREG_SET_ORDER = 2;

exports.PREG_OFFSET_CAPTURE = 4;

exports.preg_match_all = function($pattern, $subject) {
  var $i, $j, $match, $matches, $regex, $result, $x, $y, _i, _j;
  $regex = createRegExp($pattern);
  $matches = [];
  while (($match = $regex.exec($subject)) !== null) {
    $matches.push($match);
    if ($flags === PREG_SET_ORDER) {
      return $matches;
    }
    $x = $matches[0].length;
    $y = $matches[0][0].length;
    $result = [];
    for ($i = _i = 0; 0 <= $y ? _i < $y : _i > $y; $i = 0 <= $y ? ++_i : --_i) {
      $result.push([]);
      for ($j = _j = 0; 0 <= $x ? _j <= $x : _j >= $x; $j = 0 <= $x ? ++_j : --_j) {
        $result[$i].push($matches[$j][$i]);
      }
    }
    $result;

  }
};

exports.preg_replace_callback = function($pattern, $callback, $subject, $limit) {
  var $func, $method, $object, $re;
  if ($limit == null) {
    $limit = -1;
  }
  $re = createRegExp($pattern);
  if (typeof $callback === 'string') {
    $func = global[$callback];
  } else {
    $object = $callback[0];
    $method = $callback[1];
    $func = $object[$method];
  }
  return $subject.replace($re, $func, $limit);
};

exports.preg_replace = function($pattern, $replacement, $subject, $limit) {
  var $regex;
  if ($limit == null) {
    $limit = -1;
  }
  $regex = createRegExp($pattern);
  return $subject.replace($regex, $replacement);
};

exports.rawurldecode = function($str) {
  return querystring.unescape($str);
};

exports.realpath = function($path) {
  if (file_exists($path)) {
    return fs.realpathSync($path);
  } else {
    return false;
  }
};

exports.rtrim = rtrim = function($str, $chars) {
  $chars = $chars != null ? $chars : "\\s";
  return $str.replace(new RegExp("[" + $chars + "]+$", "g"), "");
};

exports.str_replace = function($search, $replace, $subject) {
  var $i;
  if (typeof $search === 'string') {
    $subject = $subject.replace($search, $replace);
  } else {
    $i = 0;
    while ($i < $search.length) {
      if (typeof $replace === 'string') {
        $subject = $subject.replace($search[$i], $replace);
      } else {
        $subject = $subject.replace($search[$i], $replace[$i] != null ? $replace[$i] : '');
      }
      $i++;
    }
  }
  return $subject;
};

exports.stristr = function($haystack, $needle, $before_needle) {
  var $pos;
  if ($before_needle == null) {
    $before_needle = false;
  }
  if (typeof $needle !== 'string') {
    $needle = String.fromCharCode(parseInt($needle, 10));
  }
  $pos = $haystack.search(new RegExp($needle, 'i'));
  if ($pos === -1) {
    return false;
  } else {
    if ($before_needle === true) {
      return $haystack.substr(0, $pos);
    } else {
      return $haystack.substr($pos, $needle.length);
    }
  }
};

exports.strlen = function($string) {
  return $string.length;
};

exports.strncmp = function($str1, $str2, $len) {
  $str1 = $str1.substr(0, $len);
  $str2 = $str2.substr(0, $len);
  if ($str1 < $str2) {
    return -1;
  } else if ($str1 > $str2) {
    return 1;
  } else {
    return 0;
  }
};

exports.strpos = function($haystack, $needle, $offset) {
  var $pos;
  if ($offset == null) {
    $offset = 0;
  }
  if (typeof $needle !== 'string') {
    $needle = String.fromCharCode(parseInt($needle, 10));
  }
  $pos = $haystack.indexOf($needle, $offset);
  if ($pos === -1) {
    return false;
  } else {
    return $pos;
  }
};

exports.strrchr = function($haystack, $needle) {
  var $pos;
  if (typeof $needle !== 'string') {
    $needle = String.fromCharCode(parseInt($needle, 10));
  }
  $needle = $needle.charAt(0);
  $pos = $haystack.lastIndexOf($needle);
  if ($pos === -1) {
    return false;
  }
  return $haystack.substr($pos);
};

exports.strrpos = function($haystack, $needle, $offset) {
  var $pos;
  if ($offset == null) {
    $offset = $haystack.length;
  }
  if (typeof $needle !== 'string') {
    $needle = String.fromCharCode(parseInt($needle, 10));
  }
  $pos = $haystack.lastIndexOf($needle, $offset);
  if ($pos === -1) {
    return false;
  } else {
    return $pos;
  }
};

exports.strstr = function($haystack, $needle, $before_needle) {
  var $pos;
  if ($before_needle == null) {
    $before_needle = false;
  }
  if (typeof $needle !== 'string') {
    $needle = String.fromCharCode(parseInt($needle, 10));
  }
  $pos = $haystack.indexOf($needle);
  if ($pos === -1) {
    return false;
  } else {
    if ($before_needle) {
      return $haystack.substr(0, $pos);
    } else {
      return $haystack.substr($pos);
    }
  }
};

exports.strtolower = function($str) {
  if ($str != null) {
    return $str.toLowerCase();
  }
};

exports.strtoupper = function($str) {
  if ($str != null) {
    return $str.toUpperCase();
  }
};

exports.substr = function($string, $start, $length) {
  var $pos;
  $pos = $string.substr($start, $length);
  if ($pos === -1) {
    return false;
  } else {
    return $pos;
  }
};

exports.trim = function($str, $chars) {
  return ltrim(rtrim($str, $chars), $chars);
};

exports.ucfirst = function($str) {
  return $str.charAt(0).toUpperCase() + $str.substr(1);
};

exports.class_exists = class_exists = function($classname) {
  return typeof global[$classname] === 'function';
};

exports.function_exists = function_exists = function($funcname) {
  return typeof global[$funcname] === 'function';
};

exports.method_exists = method_exists = function($object, $method_name) {
  return typeof $object[$method_name] === 'function';
};

exports.stripslashes = stripslashes = function($str) {
  return ($str + '').replace(/\\(.?)/g, function($s, $p) {
    switch ($p) {
      case '\\':
        return '\\';
      case '0':
        return '\u0000';
      case '':
        return '';
      default:
        return $p;
    }
  });
};

exports.register_class = register_class = function($classname, $class) {
  return define($classname, $class);
};

exports.get_class = get_class = function($object) {
  if ($object == null) {
    $object = null;
  }
  $object = $object != null ? $object : this;
  if (($object.prototype != null) && ($object.prototype.constructor != null) && ($object.prototype.constructor.name != null)) {
    return $object.prototype.constructor.name;
  } else {
    return '';
  }
};

exports.array = function($key, $value) {
  var $array;
  $array = {};
  $array[$key] = $value;
  return $array;
};

exports.htmlspecialchars = function($str) {
  return ('' + $str).replace("&", "&amp;").replace("'", "&#39;").replace('"', "&quot;").replace("<", "&lt;").replace(">", "&gt;");
};

exports.CASE_LOWER = CASE_LOWER = 0;

exports.CASE_UPPER = CASE_UPPER = 1;

exports.array_change_key_case = function($input, $case) {
  var $key, $ret, $val;
  if ($case == null) {
    $case = CASE_LOWER;
  }
  $ret = {};
  for ($key in $input) {
    $val = $input[$key];
    if ($case = CASE_LOWER) {
      $ret[$key.toLowerCase()] = $val;
    } else if ($case = CASE_UPPER) {
      $ret[$key.toUpperCase()] = $val;
    }
  }
  return $ret;
};

exports.array_key_exists = function($key, $search) {
  return $search[$key] != null;
};

exports.get_object_vars = function($object) {
  var $key, $res, $val;
  $res = {};
  for ($key in $object) {
    $val = $object[$key];
    if ($key.substr(0, 1) !== '_' && typeof $object[$key] !== 'function') {
      $res[$key] = $val;
    }
  }
  return $res;
};

exports.sprintf = require('sprintf').sprintf;

exports.glob = require('glob').sync;

exports.basename = require('path').basename;

exports.sort = function($array) {
  $array.sort();
  return true;
};

exports.ksort = function($array) {
  var $copy, $key, $keys, _i, _j, _len, _len1;
  $keys = Object.keys($array);
  $copy = {};
  for (_i = 0, _len = $keys.length; _i < _len; _i++) {
    $key = $keys[_i];
    $copy[$key] = $array[$key];
    delete $array[$key];
  }
  $keys.sort();
  for (_j = 0, _len1 = $keys.length; _j < _len1; _j++) {
    $key = $keys[_j];
    $array[$key] = $copy[$key];
  }
  return true;
};

exports.memory_get_usage = function($real_usage) {
  if ($real_usage == null) {
    $real_usage = false;
  }
  if ($real_usage) {
    return process.memoryUsage().heapTotal;
  } else {
    return process.memoryUsage().heapUsed;
  }
};

exports.round = function($val, $precision) {
  if ($precision == null) {
    $precision = 0;
  }
  if ($precision === 0) {
    return Math.round($val);
  } else {
    return Math.round($val * Math.pow(10, $precision)) / Math.pow(10, $precision);
  }
};

exports.print_r = function($expression, $return) {
  if ($return == null) {
    $return = false;
  }
  if ($return === true) {
    return util.inspect($expression);
  }
};

exports.ucwords = function($str) {
  return '' + $str.replace(/^([a-z\u00E0-\u00FC])|\s+([a-z\u00E0-\u00FC])/g, function($1) {
    return $1.toUpperCase();
  });
};

exports.wordwrap = function($string, $width, $break, $cut) {
  var $replace, $search;
  if ($width == null) {
    $width = 75;
  }
  if ($break == null) {
    $break = "\n";
  }
  if ($cut == null) {
    $cut = false;
  }
  if ($cut) {
    $search = '/(.{1,' + $width + '})(?:\s|$)|(.{' + $width + '})/uS';
    $replace = '$1$2' + $break;
  } else {
    $search = '/(?=\s)(.{1,' + $width + '})(?:\s|$)/uS';
    $replace = '$1' + $break;
  }
  return preg_replace($search, $replace, $string);
};

exports.md5 = function($str, $raw_output) {
  if ($raw_output == null) {
    $raw_output = false;
  }
  if ($raw_output === true) {
    return crypto.createHash('md5').update($str).digest("binary");
  } else {
    return crypto.createHash('md5').update($str).digest("hex");
  }
};

exports.sha1 = function($str, $raw_output) {
  if ($raw_output == null) {
    $raw_output = false;
  }
  if ($raw_output === true) {
    return crypto.createHash('sha1').update($str).digest("binary");
  } else {
    return crypto.createHash('sha1').update($str).digest("hex");
  }
};

exports.gettype = function($var) {
  return typeof $var;
};

exports.ip2long = ip2long = function($ip_address) {
  var $i, $ip, $l, _i;
  $ip = array_pad(explode('.', $ip_address), 4, 0);
  $l = 0;
  for ($i = _i = 0; _i <= 3; $i = ++_i) {
    $l = ($l * 256) + $ip[$i];
  }
  return $l;
};

exports.inet_pton = function($ip_address) {
  var $i, $ip, buff, ui8, _i;
  buff = new Buffer(4);
  ui8 = new Uint8Array(buff);
  $ip = array_pad(explode('.', $ip_address), 4, '0');
  for ($i = _i = 0; _i <= 3; $i = ++_i) {
    ui8[$i] = parseInt($ip[$i], 10);
  }
  return buff.toString();
};

exports.uniqid = function($prefix, $more_entropy) {
  var $res;
  if ($prefix == null) {
    $prefix = '';
  }
  if ($more_entropy == null) {
    $more_entropy = false;
  }
  $res = $prefix + (new Date().getTime()).toString(16) + (Math.floor(Math.random() * 256)).toString(16);
  if ($more_entropy === true) {
    $res += (Math.random() * 10).toFixed(8).toString();
  }
  return $res;
};
